# This script builds a randomly connected graph and prints in-degree 
# distribution, path length and clustering coefficient information.
# Basically it produces the data used as baseline.

SIZE 10000
CACHESIZE	30
CYCLE 1000
CYCLES 3000

random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE

## Adeel commented following
protocol.gossip IdleProtocol
{
}

init.wire WireKOut
{
	protocol gossip
	k CACHESIZE
}

control.degree example.gossip.DegreePrint
{
	protocol gossip
	
	step CYCLE
	type Random
	cacheSize CACHESIZE
}



control.graphPL GraphStats
{
	protocol gossip
	step CYCLE
	undir true
	nl 10
	nc 1000
}
control.avgClustering example.gossip.AvgClusterPrint
{
	protocol gossip
	step CYCLE
	undir true
	nc 1000
	type Random
	cacheSize CACHESIZE
}

control.avgLength example.gossip.AvgLengthPrint
{
	protocol gossip
	step CYCLE
	undir true
	nl 10
	type Random
	cacheSize CACHESIZE
}

